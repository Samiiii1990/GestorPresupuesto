@page "/agregarIngreso"
@using Model
@inject NavigationManager NavigationManager


<PageTitle>Agregar</PageTitle>

<h1>Agregar Ingreso</h1>

<form>
    <div class="mb-3">
        <label for="fecha" class="form-label">Fecha:</label>
        <input type="date" class="form-control" id="fecha" @bind="fechaIngreso"/>
    </div>
    <div class="mb-3">
        <label for="descripcion" class="form-label">Descripcion:</label>
        <input type="text" id="descripcion" class="form-control" @bind="descripcionIngreso" />
    </div>
    <div class="mb-3">
        <label for="monto" class="form-label">Monto:</label>
        <input type="text" id="monto" class="form-control" @bind="montoIngreso" />
    </div>

    <button type="button" class="btn btn-success" @onclick="Agregar">Agregar</button>
    <button type="button" class="btn btn-danger" @onclick="Cancelar">Cancelar</button>
</form>


@code {

    private DateTime fechaIngreso = DateTime.Now;
    private string tipoIngreso = "Ingreso";
    private string descripcionIngreso = "";
    private int montoIngreso = 0;




    private async Task Agregar()
    {
           try
    {
        var httpClient = new HttpClient();

        var responseIngreso = await httpClient.PutAsJsonAsync($"http://host.docker.internal:5000/api/Ingresos", new Modelo { Fecha=fechaIngreso, Tipo=tipoIngreso, Descripcion=descripcionIngreso, Monto=montoIngreso});
        
        if (responseIngreso.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var errorMessage = $"Error al agregar ingreso: {responseIngreso.StatusCode}";
        }
    }
    catch (Exception ex)
    {
        var errorMessage = $"Error: {ex.Message}";
    }


    }


    private void Cancelar()
    {
        NavigationManager.NavigateTo("/");
    }
}
