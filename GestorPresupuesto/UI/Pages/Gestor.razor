@page "/"
@using System.Text.Json;
@using Model;
@using System.Text;

<PageTitle>GestorPresupuesto</PageTitle>

<h1>Gestor Presupuesto</h1>


@if (_gastos.Count == 0)
{
    <p><em>No hay datos para mostrar...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Fecha</th>
                <th>Tipo</th>
                <th>Descripcion</th>
                <th>Monto</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @{
                decimal runningTotal = 0;
            }
            @foreach (var item in SortedList)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Fecha.ToString("dd/MM/yyyy")</td>
                    <td>@item.Tipo</td>
                    <td>@item.Descripcion</td>
                    <td>$@(item.Tipo == "Ingreso" ? item.Monto : -item.Monto)</td>
                    @{
                        runningTotal += item.Tipo == "Ingreso" ? item.Monto : -item.Monto;
                    }
                    <td>$@runningTotal</td>
                </tr>
                
            }
            <tr>
                <td colspan="5"><strong>Total:</strong></td>
                <td><strong>$@SortedList.Sum(item => item.Tipo == "Ingreso" ? item.Monto : -item.Monto)</strong></td>
            </tr>
        </tbody>
    </table>
}
<button class="btn btn-primary" @onclick="CargarDatos">Generar Reporte</button>

@code {
    private List<Modelo> _gastos = new List<Modelo>();
    private List<Modelo> _ingresos = new List<Modelo>();
    private List<Modelo> combinedList = new List<Modelo>();
    private List<Modelo> SortedList = new List<Modelo>();

    private void CargarDatos()
    {
        GetReporte();
        combinedList = _gastos.Concat(_ingresos).ToList();
        SortedList = combinedList.OrderBy(o=>o.Fecha).ToList();
    }

    public async Task GetReporte()
    {

        using (var client = new HttpClient())
        {
            try
            {
                var result = await client.GetAsync("http://host.docker.internal:4000/api/Gastos/");
                if (result.IsSuccessStatusCode)
                {
                    var resultadoServicioGastos =
                    await result.Content.ReadAsStringAsync();
                    var res1 =
                    JsonSerializer
                    .Deserialize
                    <List<Modelo>>(resultadoServicioGastos,
                    new JsonSerializerOptions()
                        { PropertyNameCaseInsensitive = true });

                    _gastos = res1;

                }
                var resultIngresos =
                await client
                .GetAsync("http://host.docker.internal:5000/api/Ingresos/");
                if (resultIngresos.IsSuccessStatusCode)
                {
                    var resultadoServicioIngresos =
                    await resultIngresos.Content.ReadAsStringAsync();
                    var res2 =
                    JsonSerializer
                    .Deserialize
                    <List<Modelo>>(resultadoServicioIngresos,
                    new JsonSerializerOptions()
                        { PropertyNameCaseInsensitive = true });

                    _ingresos = res2;

                }
            }
            catch (Exception ex)
            {
                @* ex.Message; *@
            }
        }
    }



}