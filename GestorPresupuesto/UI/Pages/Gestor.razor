@page "/"
@using System.Text.Json;
@using Model;
@using System.Text;
@using System.Net;
@inject NavigationManager NavigationManager

<PageTitle>GestorPresupuesto</PageTitle>

<h1>Gestor Presupuesto</h1>



@if (_gastos.Count == 0 && _ingresos.Count == 0)
{
    <p><em>No hay datos para mostrar...</em></p>
}

else
{
    @if (isLoading)
    {
        <div class="text-center">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
    }
    else
    {


        <table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Fecha</th>
            <th>Tipo</th>
            <th>Descripcion</th>
            <th>Monto</th>
            <th>Total</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @{
                    decimal runningTotal = 0;
                }
                @foreach (var item in SortedList)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Fecha.ToString("dd/MM/yyyy")</td>
                        <td>@item.Tipo</td>
                        <td>@item.Descripcion</td>
                        <td>$@(item.Tipo == "Ingreso" ? item.Monto : -item.Monto)</td>
                        @{
                            runningTotal += item.Tipo == "Ingreso" ? item.Monto : -item.Monto;
                        }
                        <td>$@runningTotal</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => EditarMovimiento(item.Tipo, item.Id)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => Eliminar(item)">Eliminar</button>
                        </td>
                    </tr>

                }
                <tr>
                    <td colspan="5" style="text-align: end;"><strong>Total:</strong></td>
                    <td><strong>$@SortedList.Sum(item => item.Tipo == "Ingreso" ? item.Monto : -item.Monto)</strong></td>
                </tr>
            </tbody>
        </table>


    }
}
        <button class="btn btn-primary" @onclick="AgregarIngreso">Agregar Ingreso</button>
        <button class="btn btn-primary" @onclick="AgregarGasto">Agregar Gasto</button>

@code {
    private List<Modelo> _gastos = new List<Modelo>();
    private List<Modelo> _ingresos = new List<Modelo>();
    private List<Modelo> combinedList = new List<Modelo>();
    private List<Modelo> SortedList = new List<Modelo>();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
         if (!isLoading)
        {
            isLoading = true;

            await GetReporte();
            combinedList = _gastos.Concat(_ingresos).ToList();
            SortedList = combinedList.OrderBy(o => o.Fecha).ToList();


            isLoading = false;
        }
    }


    public async Task GetReporte()
    {

        using (var client = new HttpClient())
        {
            try
            {
                var result = await client.GetAsync("http://host.docker.internal:4000/api/Gastos/");
                if (result.IsSuccessStatusCode)
                {
                    var resultadoServicioGastos =
                    await result.Content.ReadAsStringAsync();
                    var res1 =
                    JsonSerializer
                    .Deserialize
                    <List<Modelo>>(resultadoServicioGastos,
                    new JsonSerializerOptions()
                        { PropertyNameCaseInsensitive = true });

                    _gastos = res1;

                }
                var resultIngresos =
                await client
                .GetAsync("http://host.docker.internal:5000/api/Ingresos/");
                if (resultIngresos.IsSuccessStatusCode)
                {
                    var resultadoServicioIngresos =
                    await resultIngresos.Content.ReadAsStringAsync();
                    var res2 =
                    JsonSerializer
                    .Deserialize
                    <List<Modelo>>(resultadoServicioIngresos,
                    new JsonSerializerOptions()
                        { PropertyNameCaseInsensitive = true });

                    _ingresos = res2;

                }
            }
            catch (Exception ex)
            {
                @* ex.Message; *@
            }
        }
    }
        private void AgregarIngreso()
    {
        NavigationManager.NavigateTo($"/agregarIngreso");
    }

    private void AgregarGasto()
    {
        NavigationManager.NavigateTo($"/agregarGasto");
    }


    private void EditarMovimiento(string tipo, string id)
    {
        NavigationManager.NavigateTo($"/editar/{tipo}/{id}");
    }

    private void Eliminar(Modelo item)
{
    if (item.Tipo == "Ingreso")
    {
        EliminarIngreso(item.Id);
    }
    else
    {
        EliminarGasto(item.Id);
    }
}

    private async Task EliminarGasto(string id)
    {
        var httpClient = new HttpClient();

        try
        {
            var response = await httpClient.DeleteAsync($"http://host.docker.internal:4000/api/Gastos/{id}");
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var gastosResponse = await httpClient.GetFromJsonAsync<List<Modelo>>("http://host.docker.internal:4000/api/Gastos");
                if (gastosResponse != null)
                {
                    _gastos = gastosResponse;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar gasto: {ex.Message}");
        }

    }
        private async Task EliminarIngreso(string id)
    {
        var httpClient = new HttpClient();

          try
        {
            var response = await httpClient.DeleteAsync($"http://host.docker.internal:5000/api/Ingresos/{id}");
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var ingresosResponse = await httpClient.GetFromJsonAsync<List<Modelo>>("http://host.docker.internal:5000/api/Ingresos");
                if (ingresosResponse != null)
                {
                    _ingresos = ingresosResponse;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar ingreso: {ex.Message}");
        }
    }


}