@page "/gestor"
@using System.Text.Json;
@using Model;
@using System.Text;

<PageTitle>GestorPresupuesto</PageTitle>

<h1>GestorPresupuesto</h1>


@if (_gastos.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Fecha</th>
                <th>Tipo</th>
                <th>Descripcion</th>
                <th>Monto</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var _gasto in _gastos)
            {
                <tr>
                    <td>@_gasto.Id</td>
                    <td>@_gasto.Fecha</td>
                    <td>@_gasto.Tipo</td>
                    <td>@_gasto.Descripcion</td>
                    <td>@_gasto.Monto</td>
                </tr>
            }
        </tbody>
    </table>
        <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Fecha</th>
                <th>Tipo</th>
                <th>Descripcion</th>
                <th>Monto</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var _ingreso in _ingresos)
            {
                <tr>
                    <td>@_ingreso.Id</td>
                    <td>@_ingreso.Fecha</td>
                    <td>@_ingreso.Tipo</td>
                    <td>@_ingreso.Descripcion</td>
                    <td>@_ingreso.Monto</td>
                </tr>
            }
        </tbody>
    </table>
    }
<button class="btn btn-primary" @onclick="CargarDatos">Generar Reporte</button>

@code {
    private List<Gastos> _gastos = new List<Gastos>();
    private List<Ingresos> _ingresos = new List<Ingresos>();

    private void CargarDatos()
    {
        GetReporte();
    }



    public async Task GetReporte()
    {

        using (var client = new HttpClient())
        {
            try
            {
                var result = await client.GetAsync("http://host.docker.internal:4000/api/Gastos/");
                if (result.IsSuccessStatusCode)
                 {
                        var resultadoServicioGastos =
                            await result.Content.ReadAsStringAsync();
                        var res1 =
                            JsonSerializer
                                .Deserialize
                                <List<Gastos>>(resultadoServicioGastos,
                                new JsonSerializerOptions()
                                { PropertyNameCaseInsensitive = true });

                        _gastos = res1;

                    }
                    var resultIngresos =
                        await client
                            .GetAsync("http://host.docker.internal:5000/api/Ingresos/");
                    if (resultIngresos.IsSuccessStatusCode)
                    {
                        var resultadoServicioIngresos =
                            await resultIngresos.Content.ReadAsStringAsync();
                        var res2 =
                            JsonSerializer
                                .Deserialize
                                <List<Ingresos>>(resultadoServicioIngresos,
                                new JsonSerializerOptions()
                                { PropertyNameCaseInsensitive = true });

                        _ingresos = res2;

                    }
            }
            catch (Exception ex)
            {
                @* ex.Message; *@
            }
        }
    }



}